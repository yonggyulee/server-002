DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM pg_namespace WHERE nspname = 'account') THEN
        CREATE SCHEMA account;
    END IF;
END $EF$;

CREATE TABLE account."group" (
    id character varying(256) NOT NULL,
    title character varying(256) NOT NULL,
    properties jsonb NULL,
    description text NULL,
    CONSTRAINT pk_group PRIMARY KEY (id)
);


CREATE TABLE account.role_privileges (
    role_id character varying(256) NOT NULL,
    privilege_id character varying(256) NOT NULL,
    id bigint GENERATED BY DEFAULT AS IDENTITY,
    CONSTRAINT pk_role_privileges PRIMARY KEY (privilege_id, role_id)
);


CREATE TABLE account.system (
    id character varying(256) NOT NULL,
    title character varying(256) NOT NULL,
    properties jsonb NULL,
    description text NULL,
    CONSTRAINT pk_system PRIMARY KEY (id)
);


CREATE TABLE account.group_features (
    group_id character varying(256) NOT NULL,
    feature_id character varying(256) NOT NULL,
    id bigint GENERATED BY DEFAULT AS IDENTITY,
    CONSTRAINT pk_group_features PRIMARY KEY (feature_id, group_id),
    CONSTRAINT fk_group_features_groups_group_id FOREIGN KEY (group_id) REFERENCES account."group" (id) ON DELETE CASCADE
);


CREATE TABLE account."user" (
    id character varying(256) NOT NULL,
    password text NOT NULL,
    name character varying(256) NULL,
    department text NULL,
    email character varying(256) NULL,
    register_date timestamp with time zone NOT NULL,
    enabled boolean NOT NULL DEFAULT FALSE,
    lockout_end timestamp with time zone NULL,
    access_failed_count integer NOT NULL DEFAULT 0,
    last_password_changed_date timestamp with time zone NOT NULL,
    properties text NULL,
    description text NULL,
    group_id character varying(256) NOT NULL,
    role_id text NOT NULL,
    CONSTRAINT pk_user PRIMARY KEY (id),
    CONSTRAINT fk_user_group_group_id FOREIGN KEY (group_id) REFERENCES account."group" (id) ON DELETE CASCADE
);


CREATE TABLE account.group_systems (
    group_id character varying(256) NOT NULL,
    system_id character varying(256) NOT NULL,
    CONSTRAINT pk_group_systems PRIMARY KEY (group_id, system_id),
    CONSTRAINT fk_group_systems_groups_group_id FOREIGN KEY (group_id) REFERENCES account."group" (id) ON DELETE CASCADE,
    CONSTRAINT fk_group_systems_systems_system_id FOREIGN KEY (system_id) REFERENCES account.system (id) ON DELETE CASCADE
);


CREATE TABLE account.login_history (
    id bigint GENERATED BY DEFAULT AS IDENTITY,
    date timestamp with time zone NOT NULL,
    access_ip inet NULL,
    user_id character varying(256) NOT NULL,
    CONSTRAINT pk_login_history PRIMARY KEY (id),
    CONSTRAINT fk_login_history_user_user_id FOREIGN KEY (user_id) REFERENCES account."user" (id) ON DELETE CASCADE
);


CREATE TABLE account.refresh_token (
    token character varying(256) NOT NULL,
    creation_date timestamp with time zone NOT NULL,
    expiry_date timestamp with time zone NOT NULL,
    user_id character varying(256) NOT NULL,
    CONSTRAINT pk_refresh_token PRIMARY KEY (token),
    CONSTRAINT fk_refresh_token_user_user_id FOREIGN KEY (user_id) REFERENCES account."user" (id) ON DELETE CASCADE
);


CREATE TABLE account.user_privileges (
    user_id character varying(256) NOT NULL,
    privilege_id character varying(256) NOT NULL,
    id bigint GENERATED BY DEFAULT AS IDENTITY,
    CONSTRAINT pk_user_privileges PRIMARY KEY (privilege_id, user_id),
    CONSTRAINT fk_user_privileges_users_user_id FOREIGN KEY (user_id) REFERENCES account."user" (id) ON DELETE CASCADE
);


INSERT INTO account."group" (id, description, properties, title)
VALUES ('default', NULL, NULL, '기본 그룹');
INSERT INTO account."group" (id, description, properties, title)
VALUES ('MEMORY', NULL, NULL, '메모리');
INSERT INTO account."group" (id, description, properties, title)
VALUES ('SUPER', NULL, NULL, 'SUPER');

INSERT INTO account.role_privileges (privilege_id, role_id)
VALUES ('DeleteUser', 'GroupAdministrator');
INSERT INTO account.role_privileges (privilege_id, role_id)
VALUES ('DeleteUser', 'SuperAdministrator');
INSERT INTO account.role_privileges (privilege_id, role_id)
VALUES ('CreateGroup', 'SuperAdministrator');
INSERT INTO account.role_privileges (privilege_id, role_id)
VALUES ('DeleteGroup', 'SuperAdministrator');
INSERT INTO account.role_privileges (privilege_id, role_id)
VALUES ('DeleteUser', 'Developer');

INSERT INTO account."user" (id, department, description, email, enabled, group_id, last_password_changed_date, lockout_end, name, password, properties, register_date, role_id)
VALUES ('administrator', 'dev', NULL, NULL, TRUE, 'default', TIMESTAMPTZ '2022-06-03 15:38:23.681488Z', NULL, '관리자', 'NZBtu6LJ0PuhEm0untZCCCFihcYLU5N2/UOAEnAoxQs=', NULL, TIMESTAMPTZ '2022-06-03 15:38:23.681487Z', 'SuperAdministrator');
INSERT INTO account."user" (id, department, description, email, enabled, group_id, last_password_changed_date, lockout_end, name, password, properties, register_date, role_id)
VALUES ('pipeline', 'dev', NULL, NULL, TRUE, 'default', TIMESTAMPTZ '2022-06-03 15:38:23.68149Z', NULL, '파이프라인', 'NZBtu6LJ0PuhEm0untZCCCFihcYLU5N2/UOAEnAoxQs=', NULL, TIMESTAMPTZ '2022-06-03 15:38:23.68149Z', 'SuperAdministrator');


CREATE UNIQUE INDEX ix_group_title ON account."group" (title);


CREATE INDEX ix_group_features_group_id ON account.group_features (group_id);


CREATE INDEX ix_group_systems_system_id ON account.group_systems (system_id);


CREATE INDEX ix_login_history_user_id ON account.login_history (user_id);


CREATE UNIQUE INDEX ix_refresh_token_user_id ON account.refresh_token (user_id);


CREATE UNIQUE INDEX ix_system_title ON account.system (title);


CREATE INDEX ix_user_group_id ON account."user" (group_id);


CREATE UNIQUE INDEX ix_user_name ON account."user" (name);


CREATE INDEX ix_user_privileges_user_id ON account.user_privileges (user_id);


SELECT setval(
    pg_get_serial_sequence('account.role_privileges', 'id'),
    GREATEST(
        (SELECT MAX(id) FROM account.role_privileges) + 1,
        nextval(pg_get_serial_sequence('account.role_privileges', 'id'))),
    false);


