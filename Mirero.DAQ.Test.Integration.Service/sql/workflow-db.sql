DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM pg_namespace WHERE nspname = 'workflow') THEN
        CREATE SCHEMA workflow;
    END IF;
END $EF$;

CREATE TABLE workflow.batch_job (
    id varchar(256) NOT NULL,
    title text NOT NULL,
    workflow_type varchar(256) NOT NULL,
    total_count integer NOT NULL DEFAULT (0),
    status varchar(256) NOT NULL,
    register_date timestamp with time zone NULL DEFAULT (now()),
    start_date timestamp with time zone NULL,
    end_date timestamp with time zone NULL,
    register_user varchar(256) NOT NULL,
    properties jsonb NULL,
    description text NULL,
    CONSTRAINT pk_batch_job PRIMARY KEY (id)
);


CREATE TABLE workflow.server (
    id character varying(256) NOT NULL,
    address inet NOT NULL,
    os_type character varying(256) NOT NULL,
    os_version character varying(256) NOT NULL,
    cpu_count integer NOT NULL DEFAULT (0),
    cpu_memory bigint NOT NULL DEFAULT (0),
    gpu_name character varying(256) NULL,
    gpu_count bigint NOT NULL DEFAULT (0),
    gpu_memory bigint NOT NULL DEFAULT (0),
    properties jsonb NULL,
    description text NULL,
    CONSTRAINT pk_server PRIMARY KEY (id)
);


CREATE TABLE workflow.volume (
    id character varying(256) NOT NULL,
    title character varying(256) NOT NULL,
    type text NOT NULL,
    uri character varying(256) NOT NULL,
    usage bigint NOT NULL DEFAULT 0,
    capacity bigint NOT NULL DEFAULT 0,
    properties jsonb NULL,
    description text NULL,
    CONSTRAINT pk_volume PRIMARY KEY (id)
);


CREATE TABLE workflow.worker (
    id varchar(256) NOT NULL,
    workflow_type varchar(512) NOT NULL,
    job_type varchar(512) NOT NULL,
    server_id character varying(256) NOT NULL,
    cpu_count integer NOT NULL DEFAULT (0),
    cpu_memory bigint NOT NULL DEFAULT (0),
    gpu_count integer NOT NULL DEFAULT (0),
    gpu_memory bigint NOT NULL DEFAULT (0),
    properties jsonb NULL,
    description text NULL,
    CONSTRAINT pk_worker PRIMARY KEY (id),
    CONSTRAINT fk_worker_server_server_id FOREIGN KEY (server_id) REFERENCES workflow.server (id) ON DELETE CASCADE
);


CREATE TABLE workflow.workflow (
    id bigint GENERATED BY DEFAULT AS IDENTITY,
    volume_id character varying(256) NOT NULL,
    type varchar(50) NOT NULL,
    title varchar(512) NOT NULL,
    properties jsonb NULL,
    description text NULL,
    create_user varchar(256) NOT NULL,
    update_user varchar(256) NOT NULL,
    create_date timestamp with time zone NOT NULL DEFAULT (now()),
    update_date timestamp with time zone NOT NULL DEFAULT (now()),
    CONSTRAINT pk_workflow PRIMARY KEY (id),
    CONSTRAINT fk_workflow_volume_volume_id FOREIGN KEY (volume_id) REFERENCES workflow.volume (id) ON DELETE CASCADE
);


CREATE TABLE workflow.workflow_version (
    id bigint GENERATED BY DEFAULT AS IDENTITY,
    workflow_id bigint NOT NULL,
    version varchar(512) NOT NULL,
    data_status varchar(256) NULL,
    file_name varchar(512) NOT NULL,
    create_user varchar(256) NOT NULL,
    update_user varchar(256) NOT NULL,
    create_date timestamp with time zone NOT NULL DEFAULT (now()),
    update_date timestamp with time zone NOT NULL DEFAULT (now()),
    properties jsonb NULL,
    description text NULL,
    CONSTRAINT pk_workflow_version PRIMARY KEY (id),
    CONSTRAINT fk_workflow_version_workflow_workflow_id FOREIGN KEY (workflow_id) REFERENCES workflow.workflow (id) ON DELETE CASCADE
);


CREATE TABLE workflow.default_workflow_version (
    id bigint GENERATED BY DEFAULT AS IDENTITY,
    workflow_id bigint NOT NULL,
    workflow_version_id bigint NOT NULL,
    CONSTRAINT pk_default_workflow_version PRIMARY KEY (id),
    CONSTRAINT fk_default_workflow_version_workflow_version_workflow_version_ FOREIGN KEY (workflow_version_id) REFERENCES workflow.workflow_version (id) ON DELETE CASCADE,
    CONSTRAINT fk_default_workflow_version_workflow_workflow_id FOREIGN KEY (workflow_id) REFERENCES workflow.workflow (id) ON DELETE CASCADE
);


CREATE TABLE workflow.job (
    id varchar(256) NOT NULL,
    batch_job_id varchar(256) NOT NULL,
    worker_id varchar(256) NULL,
    type varchar(256) NOT NULL,
    workflow_version_id bigint NULL,
    status varchar(256) NOT NULL,
    register_date timestamp with time zone NULL DEFAULT (now()),
    start_date timestamp with time zone NULL,
    end_date timestamp with time zone NULL,
    parameter bytea NOT NULL,
    CONSTRAINT pk_job PRIMARY KEY (id),
    CONSTRAINT fk_job_batch_job_batch_job_id FOREIGN KEY (batch_job_id) REFERENCES workflow.batch_job (id) ON DELETE CASCADE,
    CONSTRAINT fk_job_worker_worker_id FOREIGN KEY (worker_id) REFERENCES workflow.worker (id),
    CONSTRAINT fk_job_workflow_version_workflow_version_id FOREIGN KEY (workflow_version_id) REFERENCES workflow.workflow_version (id)
);


CREATE INDEX ix_batch_job_title ON workflow.batch_job (title);


CREATE INDEX ix_default_workflow_version_workflow_id ON workflow.default_workflow_version (workflow_id);


CREATE INDEX ix_default_workflow_version_workflow_version_id ON workflow.default_workflow_version (workflow_version_id);


CREATE INDEX ix_job_batch_job_id ON workflow.job (batch_job_id);


CREATE INDEX ix_job_worker_id ON workflow.job (worker_id);


CREATE INDEX ix_job_workflow_version_id ON workflow.job (workflow_version_id);


CREATE UNIQUE INDEX ix_volume_title ON workflow.volume (title);


CREATE UNIQUE INDEX ix_volume_uri ON workflow.volume (uri);


CREATE INDEX ix_worker_server_id ON workflow.worker (server_id);


CREATE UNIQUE INDEX ix_workflow_title ON workflow.workflow (title);


CREATE INDEX ix_workflow_volume_id ON workflow.workflow (volume_id);


CREATE INDEX ix_workflow_version_workflow_id_version_file_name ON workflow.workflow_version (workflow_id, version, file_name);


