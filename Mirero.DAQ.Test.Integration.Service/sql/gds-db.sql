DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM pg_namespace WHERE nspname = 'gds') THEN
        CREATE SCHEMA gds;
    END IF;
END $EF$;

CREATE TABLE gds.floor_plan (
    id bigint GENERATED BY DEFAULT AS IDENTITY,
    title varchar(512) NOT NULL,
    register_date timestamp with time zone NOT NULL,
    update_date timestamp with time zone NOT NULL,
    register_user varchar(100) NOT NULL,
    update_user varchar(100) NULL,
    properties jsonb NULL,
    description text NULL,
    CONSTRAINT pk_floor_plan PRIMARY KEY (id)
);


CREATE TABLE gds.gds_load_history (
    id bigint GENERATED BY DEFAULT AS IDENTITY,
    server_id text NOT NULL,
    floor_plan_id text NOT NULL,
    gds_id text NOT NULL,
    gds_file_name varchar(512) NOT NULL,
    load_user_name varchar(256) NOT NULL,
    unload_user_name varchar(256) NOT NULL,
    load_start_date timestamp with time zone NOT NULL DEFAULT (now()),
    load_end_date timestamp with time zone NOT NULL DEFAULT (now()),
    unload_date timestamp with time zone NOT NULL DEFAULT (now()),
    load_parameters jsonb NULL,
    CONSTRAINT pk_gds_load_history PRIMARY KEY (id)
);


CREATE TABLE gds.server (
    id character varying(256) NOT NULL,
    address inet NOT NULL,
    os_type varchar(256) NOT NULL,
    os_version varchar(256) NOT NULL,
    cpu_count integer NULL,
    cpu_memory bigint NULL,
    properties jsonb NULL,
    description text NULL,
    CONSTRAINT pk_server PRIMARY KEY (id)
);


CREATE TABLE gds.volume (
    id character varying(256) NOT NULL,
    title text NOT NULL,
    type varchar(256) NOT NULL,
    uri varchar(512) NOT NULL,
    usage bigint NOT NULL,
    capacity bigint NOT NULL,
    properties jsonb NULL,
    description text NULL,
    CONSTRAINT pk_volume PRIMARY KEY (id)
);


CREATE TABLE gds.gds (
    id bigint GENERATED BY DEFAULT AS IDENTITY,
    volume_id character varying(256) NULL,
    filename varchar(512) NOT NULL,
    extension varchar(20) NULL,
    file_size integer NULL,
    status varchar(100) NOT NULL,
    using_memory_size integer NOT NULL DEFAULT (0),
    layers jsonb NULL,
    start_x bigint NULL,
    start_y bigint NULL,
    end_x bigint NULL,
    end_y bigint NULL,
    dbu double precision NULL,
    cell_count integer NULL,
    layer_count integer NULL,
    reference_count bigint NULL,
    shape_count bigint NULL,
    edge_count bigint NULL,
    register_date timestamp with time zone NOT NULL,
    update_date timestamp with time zone NOT NULL,
    register_user varchar(100) NOT NULL,
    update_user varchar(100) NULL,
    properties jsonb NULL,
    description text NULL,
    CONSTRAINT pk_gds PRIMARY KEY (id),
    CONSTRAINT fk_gds_volumes_volume_id FOREIGN KEY (volume_id) REFERENCES gds.volume (id)
);


CREATE TABLE gds.floor_plan_gds (
    id bigint GENERATED BY DEFAULT AS IDENTITY,
    floor_plan_id bigint NOT NULL,
    gds_id bigint NOT NULL,
    layers jsonb NOT NULL,
    offset_x double precision NULL,
    offset_y double precision NULL,
    CONSTRAINT pk_floor_plan_gds PRIMARY KEY (id),
    CONSTRAINT fk_floor_plan_gds_floor_plan_floor_plan_id FOREIGN KEY (floor_plan_id) REFERENCES gds.floor_plan (id) ON DELETE CASCADE,
    CONSTRAINT fk_floor_plan_gds_gds_gds_id FOREIGN KEY (gds_id) REFERENCES gds.gds (id) ON DELETE CASCADE
);


CREATE TABLE gds.worker (
    id character varying(256) NOT NULL,
    floor_plan_gds_id bigint NOT NULL,
    create_date timestamp with time zone NOT NULL DEFAULT (now()),
    update_date timestamp with time zone NOT NULL DEFAULT (now()),
    server_id character varying(256) NOT NULL,
    cpu_count integer NULL,
    cpu_memory bigint NULL,
    properties jsonb NULL,
    description text NULL,
    CONSTRAINT pk_worker PRIMARY KEY (id),
    CONSTRAINT fk_worker_floor_plans_gds_floor_plan_gds_id FOREIGN KEY (floor_plan_gds_id) REFERENCES gds.floor_plan_gds (id) ON DELETE CASCADE,
    CONSTRAINT fk_worker_server_server_id FOREIGN KEY (server_id) REFERENCES gds.server (id) ON DELETE CASCADE
);


CREATE INDEX ix_floor_plan_gds_floor_plan_id ON gds.floor_plan_gds (floor_plan_id);


CREATE INDEX ix_floor_plan_gds_gds_id ON gds.floor_plan_gds (gds_id);


CREATE INDEX ix_gds_volume_id ON gds.gds (volume_id);


CREATE UNIQUE INDEX ix_volume_title ON gds.volume (title);


CREATE UNIQUE INDEX ix_volume_uri ON gds.volume (uri);


CREATE INDEX ix_worker_floor_plan_gds_id ON gds.worker (floor_plan_gds_id);


CREATE INDEX ix_worker_server_id ON gds.worker (server_id);


